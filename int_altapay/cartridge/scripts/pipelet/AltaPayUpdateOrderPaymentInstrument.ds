/**
 * Adds the payment values from AltaPay to the order payment instrument on the current order.
 *
 * @input Order 	: dw.order.Order The current order
 * @input XMLString : String The returned xml parameter value from create payment request.
 * @input OrderConfirmed : Boolean This indicates, that the payment has been confirmed or not.
 */
importPackage( dw.order );
importPackage( dw.system );
importScript( 'int_altapay:/libAltaPayHelper.ds' );
importScript( 'int_altapay:jssdk/Rhino-AltaPay-Jssdk-20170629_033936.js' );

function execute( args : PipelineDictionary ) : Number {
	
	var order : Order = args.Order;
	if( args.Order == null) {
		Logger.error( 'AltaPayUpdateOrderPaymentInstrument.ds: Order isn\'t available.' );
		return PIPELET_ERROR;
	}
	
	var altapayHelper : Object = getAltaPayHelper();
	var altaPayPaymentInstrument : OrderPaymentInstrument = altapayHelper.getAltaPayPaymentInstrument( order );
	if ( altaPayPaymentInstrument == null ) {
		Logger.error( 'AltaPayUpdateOrderPaymentInstrument.ds: PaymentInstrument not found!');
		return PIPELET_ERROR;
	} else if ( !altapayHelper.isAltaPay ) {
		//Not an AltaPay payment.
		return PIPELET_NEXT;
	}

	if (args.XMLString != null && !empty(args.XMLString)) {
		
		var xml_obj : XML = new XML(args.XMLString);
		
		var factory = new ResponseFactory();
		
		var cbr = factory.getCallbackResponse(xml_obj);
		
		//Create parameters
		var MaskedCardNo : String = encodeURIComponent(cbr.getPayment(0).getCreditCardMaskedPan());
		var TransactionID : String = encodeURIComponent(cbr.getTransactionId());
		var CreditCardType : String = encodeURIComponent(cbr.getPayment(0).getPaymentSchemeName());
		var CardExirationMonth : String = encodeURIComponent(cbr.getPayment(0).getCreditCardExpiryMonth());
		var CardExirationYear : String = encodeURIComponent(cbr.getPayment(0).getCreditCardExpiryYear());
		var ReconciliationID : String = encodeURIComponent(cbr.getPayment(0).getReconciliationIdentifier());
	}
	
	//Settings payment status
	if(args.OrderConfirmed){
		order.setConfirmationStatus(Order.CONFIRMATION_STATUS_CONFIRMED);
	}
	else{
		order.setConfirmationStatus(Order.CONFIRMATION_STATUS_NOTCONFIRMED);
	}

	//setting card number	
	if ( !empty(MaskedCardNo) ) {
		altaPayPaymentInstrument.setCreditCardNumber( MaskedCardNo );
	}
	//setting transaction id	
	var paymentTransaction : dw.order.PaymentTransaction = altaPayPaymentInstrument.paymentTransaction;
	paymentTransaction.setTransactionID( TransactionID );

	//setting expiration date	
	if ( !empty(CardExirationMonth) && !empty(CardExirationYear) ) {
		var month : String = CardExirationMonth;
		var year : String = CardExirationYear.substr(2, 4);
		
		altaPayPaymentInstrument.setCreditCardExpirationMonth(parseInt(month, 10));
		altaPayPaymentInstrument.setCreditCardExpirationYear(parseInt(year, 10));
	}
	
	//Set reconciliation ID
    try{
        var txn = require('dw/system/Transaction');
        var custom : CustomAttributes = altaPayPaymentInstrument.getCustom();
        if(ReconciliationID != null){
            txn.wrap (
                function () {
                    custom.reconciliationIdentifier = ReconciliationID;
                });
        }
    }
    catch(e){
        //The reconciliationIdentifier was set on the Order Payment Instrument        
    }
    
	//Update payment instrument
	if(altaPayPaymentInstrument != null){
		var paymentManager : dw.order.PaymentMgr = PaymentMgr.getPaymentMethod(altaPayPaymentInstrument.paymentMethod);
	  	altaPayPaymentInstrument.paymentTransaction.paymentProcessor = paymentManager.paymentProcessor;
	}
	
	//setting credit card type
	var creditCardType : String = CreditCardType;
	if ( !empty(creditCardType) ) {
		altaPayPaymentInstrument.setCreditCardType(creditCardType);
	}
	
   return PIPELET_NEXT;
}

function updateOrderPaymentInstrument (order: Order, xmlString: String, orderConfirmed: Boolean) {
	
	var ret = execute(
		{
			Order: order,
			XMLString: xmlString,
			OrderConfirmed: orderConfirmed
		});
		
	if (ret == PIPELET_NEXT) {
		return true;
	}
	else {
		return false;
	}
	
}

module.exports = {
	execute: execute,
	updateOrderPaymentInstrument: updateOrderPaymentInstrument
}


