/**
* Creates an AltaPay payment.
*
* @input Basket : dw.order.Basket The basket to use in the payment creation.
* @input Order : dw.order.Order The Order to use in the payment creation.
* @input TerminalID : String 
* @output CreatePaymentURL : String AltaPay createPayment url with parameters.
*
*/
importPackage( dw.net );
importPackage( dw.order );
importPackage( dw.system );
importPackage( dw.value );
importPackage( dw.web );
importScript("int_altapay:libAltaPay.ds");
importScript("int_altapay:libAltaPayHelper.ds");

var CREATEPAYMENTURL : String = "/merchant/API/createPaymentRequest";

function execute( args : PipelineDictionary ) : Number
{
	var order : Order = args.Order; 
	var req = request;
	
	var altaPayMgr : Object = getAltaPayMgr();
	var url : String = (altaPayMgr.testMode ? altaPayMgr.baseTestURL : altaPayMgr.baseProductionURL) +
						CREATEPAYMENTURL;
	var currencyCode : String = order.currencyCode != null ? order.currencyCode : session.currency.currencyCode; 
	
	if(TaxMgr.taxationPolicy == TaxMgr.TAX_POLICY_GROSS && order.totalGrossPrice.available) {
		paymentTotal = order.totalGrossPrice;
	} else if (TaxMgr.taxationPolicy == TaxMgr.TAX_POLICY_NET && order.totalNetPrice.available) {
	
		if (order.totalTax.available) {
			paymentTotal = order.totalNetPrice.add(order.totalTax);
		} else {
			paymentTotal = order.totalNetPrice;
		}
		
	} else {
		paymentTotal = order.getAdjustedMerchandizeTotalPrice(true).add(order.giftCertificateTotalPrice);
	}
	
	var paymentInstrument : OrderPaymentInstrument = null;
	
	//Get Altapay terminal name
	var altapayTeminalName : String = args.TerminalID;
	if (altapayTeminalName == null) {
		var altaPayHelper : Object = getAltaPayHelper();
		paymentInstrument = altaPayHelper.getAltaPayPaymentInstrument(order);
		altapayTeminalName = altaPayMgr.terminals[paymentInstrument.paymentMethod];
	}
	
	//Create parameters
	var parameterArr = new Array();
	parameterArr.push( [ 'terminal', encodeURIComponent(altapayTeminalName)			].join( '=' ) );
	parameterArr.push( [ 'shop_orderid', order.orderNo					].join( '=' ) );
	parameterArr.push( [ 'amount', paymentTotal.value.toFixed(2)					].join( '=' ) );
	parameterArr.push( [ 'currency', currencyCode			 						].join( '=' ) );
	parameterArr.push( [ 'language', convertLanguageCode(request.locale)	].join( '=' ) );
	parameterArr.push( [ 'type', 'payment'											].join( '=' ) ); //See documentation for other payment types.
	
	//Callback config parameters
	if ( !empty(altaPayMgr.paymentPagePipeline) ) {
		parameterArr.push( [ encodeURIComponent('config[callback_form]'), encodeURIComponent(URLUtils.https( altaPayMgr.paymentPagePipeline )) 	].join( '=' ) );
	}
	
	//Credit card token:
	var custom: CustomAttributes = session.getCustomer().getProfile().getCustom();

	try {	
		var ccToken = custom.ccToken;
		if (ccToken != undefined && ccToken != null) {
			parameterArr.push (['ccToken', ccToken].join('=')); 
		}
	}
	catch (e) {
		// Exception: ccToken wasn't defined inside Demandware Business Manager 
	}
	
	
	//CSRF TOKEN:
	var CSRFProtection = require('dw/web/CSRFProtection');
	var name = CSRFProtection.getTokenName();
	var token = '?' + name + '=' + req.httpParameterMap.csrf_token.stringValue;
	
	parameterArr.push( [ encodeURIComponent('config[callback_ok]'), encodeURIComponent(URLUtils.https( altaPayMgr.paymentSuccessPipeline  )) + token 	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('config[callback_fail]'), encodeURIComponent(URLUtils.https( altaPayMgr.paymentFailPipeline ))	 + token 	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('config[callback_open]'), encodeURIComponent(URLUtils.https( altaPayMgr.paymentOpenPipeline ))	 + token 	].join( '=' ) );
	
	if (!empty(altaPayMgr.redirectPipeline)) {
		parameterArr.push( [ encodeURIComponent('config[callback_redirect]'), encodeURIComponent(URLUtils.https( altaPayMgr.redirectPipeline ))	].join( '=' ) );
	}
	if (!empty(altaPayMgr.paymentNotificationPipeline)) {
		parameterArr.push( [ encodeURIComponent('config[callback_notification]'), encodeURIComponent(URLUtils.https( altaPayMgr.paymentNotificationPipeline )) + token ].join( '=' ) );
	}
	
	//Customer config parameters
	parameterArr.push( [ encodeURIComponent('customer_info[email]'), encodeURIComponent(order.customerEmail)						].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[username]'), encodeURIComponent(order.customerEmail)					].join( '=' ) );
	if (order.billingAddress.phone != null && !empty(order.billingAddress.phone)) {
		parameterArr.push( [ encodeURIComponent('customer_info[customer_phone]'), encodeURIComponent(order.billingAddress.phone)	].join( '=' ) );
	}
	
	//Billing address parameters
	parameterArr.push( [ encodeURIComponent('customer_info[billing_firstname]'), encodeURIComponent(order.billingAddress.firstName)].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[billing_lastname]'), encodeURIComponent(order.billingAddress.lastName)	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[billing_address]'), encodeURIComponent(order.billingAddress.address1)	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[billing_postal]'), encodeURIComponent(order.billingAddress.postalCode)	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[billing_city]'), encodeURIComponent(order.billingAddress.city)			].join( '=' ) );
	if (order.billingAddress.stateCode != null && !empty(order.billingAddress.stateCode)) {
		parameterArr.push( [ encodeURIComponent('customer_info[billing_region]'), encodeURIComponent(order.billingAddress.stateCode)	].join( '=' ) );
	}
	parameterArr.push( [ encodeURIComponent('customer_info[billing_country]'), encodeURIComponent(order.billingAddress.countryCode)					].join( '=' ) );
	
	//Shipping config parameters
	parameterArr.push( [ encodeURIComponent('customer_info[shipping_firstname]'), encodeURIComponent(order.defaultShipment.shippingAddress.firstName)	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[shipping_lastname]'), encodeURIComponent(order.defaultShipment.shippingAddress.lastName)	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[shipping_address]'), encodeURIComponent(order.defaultShipment.shippingAddress.address1)		].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[shipping_postal]'), encodeURIComponent(order.defaultShipment.shippingAddress.postalCode)	].join( '=' ) );
	parameterArr.push( [ encodeURIComponent('customer_info[shipping_city]'), encodeURIComponent(order.defaultShipment.shippingAddress.city)			].join( '=' ) );
	if (order.defaultShipment.shippingAddress.stateCode != null && !empty(order.defaultShipment.shippingAddress.stateCode)) {
		parameterArr.push( [ encodeURIComponent('customer_info[shipping_region]'), encodeURIComponent(order.defaultShipment.shippingAddress.stateCode)		].join( '=' ) );
	}
	parameterArr.push( [ encodeURIComponent('customer_info[shipping_country]'), encodeURIComponent(order.defaultShipment.shippingAddress.countryCode)	].join( '=' ) );
	
	//Orderlines parameters
	if (order.shipments != null) {
		var lineIndex : Number = 1;
		for each (let shipment : Shipment in order.shipments) {
			//Add shipping
			parameterArr.push( [ encodeURIComponent('orderLines[0][description]'), encodeURIComponent(dw.web.Resource.msg('altapay.paymentcreate.shipment','altapay','Shipment'))].join( '=' ) );
			parameterArr.push( [ encodeURIComponent('orderLines[0][itemId]'), 'shipment'													].join( '=' ) );
			parameterArr.push( [ encodeURIComponent('orderLines[0][quantity]'), '1'															].join( '=' ) );
			//parameterArr.push( [ encodeURIComponent('orderLines[0][unitPrice]'), encodeURIComponent(shipment.adjustedShippingTotalNetPrice)	].join( '=' ) );
			//parameterArr.push( [ encodeURIComponent('orderLines[0][taxAmount]'), encodeURIComponent(shipment.adjustedShippingTotalTax)		].join( '=' ) );
			parameterArr.push( [ encodeURIComponent('orderLines[0][unitPrice]'), encodeURIComponent(shipment.shippingTotalNetPrice)			].join( '=' ) );
			parameterArr.push( [ encodeURIComponent('orderLines[0][taxAmount]'), encodeURIComponent(shipment.shippingTotalTax)				].join( '=' ) );
			parameterArr.push( [ encodeURIComponent('orderLines[0][goodsType]'), 'shipment'													].join( '=' ) );
				
			//Add products
			for each (let productLineItem : ProductLineItem in shipment.productLineItems) {
				var unitPrice : Number = productLineItem.adjustedNetPrice / productLineItem.quantity;
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][description]'), encodeURIComponent(productLineItem.productName)	].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][itemId]'), encodeURIComponent(productLineItem.productID)			].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][quantity]'), encodeURIComponent(productLineItem.quantity)		].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][unitPrice]'), encodeURIComponent(unitPrice.toFixed(2))			].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][taxAmount]'), encodeURIComponent(productLineItem.adjustedTax)	].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][goodsType]'), 'item'												].join( '=' ) );
				
				lineIndex++;
			}
				
			//Add non product line discounts
			var totalDiscount = 0;
			var totalDicsountExclVAT = 0;
			if (order.priceAdjustments.length > 0) {
				for each (var pa in order.priceAdjustments) {
					totalDiscount += (pa.price.value * -1);
					totalDicsountExclVAT += (pa.netPrice.value * -1);
				}
			}
			if (order.defaultShipment.adjustedShippingTotalPrice.value != order.shippingTotalPrice.value) {
				totalDiscount += (order.shippingTotalPrice.value - order.defaultShipment.adjustedShippingTotalPrice.value);
				totalDicsountExclVAT += (order.shippingTotalNetPrice.value - order.defaultShipment.adjustedShippingTotalNetPrice.value);
			}
	
			if (totalDicsountExclVAT > 0) {
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][description]'), encodeURIComponent(dw.web.Resource.msg('altapay.paymentcreate.handling','altapay','Handling'))		].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][itemId]'), 'handling'													].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][quantity]'), '1'															].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][unitPrice]'), encodeURIComponent(totalDicsountExclVAT * -1)				].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][taxAmount]'), encodeURIComponent(totalDicsountExclVAT - totalDiscount)	].join( '=' ) );
				parameterArr.push( [ encodeURIComponent('orderLines['+lineIndex+'][goodsType]'), 'handling'													].join( '=' ) );
			}
		}
	}
	
	//Add Order token
	parameterArr.push( ['transaction_info[demandware_order_token]', order.getOrderToken()].join( '=' ));
	
	/*
	//add the sale_reconciliation_identifier 
	parameterArr.push( ['sale_reconciliation_identifier', "Insert reconciliation identifier here" ].join( '=' ));
	*/
	
	//Cookies
	var cookies : Cookies = request.httpCookies;
	var cookieArr = new Array();
	for each (var cookie in cookies) {
		cookieArr.push( [ cookie.name, cookie.value			].join( '=' ) );
	}
	var cookieString : String = cookieArr.join( ";" );
	parameterArr.push( [ 'cookie', encodeURIComponent(cookieString)	].join( '=' ) );
	
	var parameters : String = parameterArr.join( "&" );
	
	try {
 		args.CreatePaymentURL = "";
    	
    	var httpClient : HTTPClient = new HTTPClient();
		var username : String = altaPayMgr.testMode ? altaPayMgr.usernameTest : altaPayMgr.username;
	    var password : String = altaPayMgr.testMode ? altaPayMgr.passwordTest : altaPayMgr.password;
		httpClient.open('POST', url, username, password);
		httpClient.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
 		httpClient.timeout = (parseInt(altaPayMgr.timeout)*1000);
    	httpClient.send(parameters);
    	
    	if ( httpClient.statusCode == 200 ) {
			var xml_obj : XML = new XML(httpClient.text);
			if (xml_obj.Header.ErrorCode == "0") {
				args.CreatePaymentURL = xml_obj.Body.Url.toString();
			} else {
				Logger.error("AltaPay error during create payment request. ErrorCode=" + xml_obj.Header.ErrorCode + ", ErrorMessage=" + xml_obj.Header.ErrorMessage);
			}
		} else {
			Logger.error("AltaPay error during create payment request. httpClient.statusCode=" + httpClient.statusCode + ", httpClient.statusMessage=" + httpClient.statusMessage);
    	}
    } catch( e ) {
    	var exception = e;
    	Logger.error("AltaPay error during create payment request.", e);
    }
    
   return PIPELET_NEXT;
}

function convertLanguageCode(languageCode){
	var pattern = /(.{2,3})(_)/;
	var match = pattern.exec(languageCode);
	if(match != null){
		return match[1];
	}
	else{
		return languageCode;
	}
}

function create (pdict) {
	
	execute(pdict);
	
	if (pdict.CreatePaymentURL == '') {
		return false;
	}
	else {
		return true;
	}
	
}

module.exports = {
	execute: execute,
	create: create
}
